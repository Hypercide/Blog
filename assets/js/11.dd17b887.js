(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{277:function(_,v,e){"use strict";e.r(v);var o=e(22),a=Object(o.a)({},function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"mysql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql","aria-hidden":"true"}},[_._v("#")]),_._v(" MySQL")]),_._v(" "),e("h2",{attrs:{id:"数据库三范式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据库三范式","aria-hidden":"true"}},[_._v("#")]),_._v(" 数据库三范式")]),_._v(" "),e("ul",[e("li",[_._v("第一范式\n"),e("ul",[e("li",[_._v("属性的原子性，字段不可再分割")])])]),_._v(" "),e("li",[_._v("第二范式\n"),e("ul",[e("li",[_._v("记录的唯一性，记录有唯一标识(即主键)，其他字段依赖于主键")])])]),_._v(" "),e("li",[_._v("第三范式\n"),e("ul",[e("li",[_._v("消除传递依赖，字段没有冗余，不存在传递依赖")])])])]),_._v(" "),e("h2",{attrs:{id:"什么叫事务？简称acid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么叫事务？简称acid","aria-hidden":"true"}},[_._v("#")]),_._v(" 什么叫事务？简称"),e("code",[_._v("ACID")])]),_._v(" "),e("ul",[e("li",[e("p",[_._v("A 事务的"),e("code",[_._v("原子性")]),_._v("(Atomicity)：指一个事务要么全部执行,要么不执行.也就是说一个事务不可能只执行了一半就停止了.比如你从取款机取钱,这个事务可以分成两个步骤:1划卡,2出钱.不可能划了卡,而钱却没出来.这两步必须同时完成.要么就不完成.")])]),_._v(" "),e("li",[e("p",[_._v("C 事务的"),e("code",[_._v("一致性")]),_._v("(Consistency)：指事务的运行并不改变数据库中数据的一致性.例如,完整性约束了a+b=10,一个事务改变了a,那么b也应该随之改变.")])]),_._v(" "),e("li",[e("p",[_._v("I "),e("code",[_._v("独立性")]),_._v("(Isolation）:事务的独立性也有称作隔离性,是指两个以上的事务不会出现交错执行的状态.因为这样可能会导致数据不一致.")])]),_._v(" "),e("li",[e("p",[_._v("D "),e("code",[_._v("持久性")]),_._v("(Durability）:事务的持久性是指事务执行成功以后,该事务所对数据库所作的更改便是持久的保存在数据库之中，不会无缘无故的回滚.")])])]),_._v(" "),e("h2",{attrs:{id:"mysql各个存储引擎比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql各个存储引擎比较","aria-hidden":"true"}},[_._v("#")]),_._v(" MySQL各个存储引擎比较")]),_._v(" "),e("p",[_._v("MySQL中的数据用各种不同的技术存储在文件（或者内存）中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。")]),_._v(" "),e("p",[_._v("存储引擎主要有： 1. "),e("code",[_._v("MyIsam")]),_._v(" , 2. "),e("code",[_._v("InnoDB")]),_._v(", 3. "),e("code",[_._v("Memory")]),_._v(", 4. "),e("code",[_._v("Blackhole")]),_._v(", 5. "),e("code",[_._v("CSV")]),_._v(", 6. "),e("code",[_._v("Performance_Schema")]),_._v(", 7. "),e("code",[_._v("Archive")]),_._v(", 8. "),e("code",[_._v("Federated")]),_._v(", 9. "),e("code",[_._v("Mrg_Myisam")])]),_._v(" "),e("p",[_._v("主要分析使用"),e("code",[_._v("MyIsam")]),_._v("和"),e("code",[_._v("InnoDB")]),_._v("，这两种引擎的数据结构都是B+树。")]),_._v(" "),e("p",[_._v("存储的不同：\n"),e("code",[_._v("MyIsam")]),_._v("树节点存储得是数据的地址，指向实际的数据；\n"),e("code",[_._v("InnoDB")]),_._v("树节点存储得是实际的数据；这种索引也被称为聚集索引")]),_._v(" "),e("p",[e("strong",[_._v("基本的差别为："),e("code",[_._v("MyIsam")]),_._v("类型不支持事务处理等高级处理，而"),e("code",[_._v("InnoDB")]),_._v("类型支持。"),e("code",[_._v("MyIsam")]),_._v("类型的表强调的是性能，其执行数度比"),e("code",[_._v("InnoDB")]),_._v("类型更快，但是不提供事务支持，而"),e("code",[_._v("InnoDB")]),_._v("提供事务支持已经外部键等高级数据库功能。")])]),_._v(" "),e("h3",{attrs:{id:"myisam"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#myisam","aria-hidden":"true"}},[_._v("#")]),_._v(" MyIsam")]),_._v(" "),e("p",[_._v("这个是5.5版本之前的默认引擎，不提供事务和行级锁和外键约束，当在"),e("code",[_._v("insert")]),_._v("和"),e("code",[_._v("update")]),_._v("时会锁定全表，所以在执行写操作对的时候效率会很慢，\n和"),e("code",[_._v("innodb")]),_._v("不同的是，"),e("code",[_._v("myiasm")]),_._v("保留了行数，所以在执行"),e("code",[_._v("select count（*） from")]),_._v("的时候会很快，不需要扫描全表，当我们执行的读操作多于写操作的时候，并且不需要事务的支持，我们可以使用"),e("code",[_._v("myisam")]),_._v("这个引擎。\n引擎在创建表的时候，会创建三个文件：")]),_._v(" "),e("ol",[e("li",[_._v("用于存储表的定义"),e("code",[_._v(".frm")]),_._v("文件")]),_._v(" "),e("li",[_._v("用于存储表的数据"),e("code",[_._v(".MYD")]),_._v("文件")]),_._v(" "),e("li",[_._v("用于存储的是索引"),e("code",[_._v(".MYI")]),_._v("文件\n操作系统对大文件的操作是比较慢的，这样将表分为三个文件，平均分配"),e("code",[_._v("IO")]),_._v("，那么"),e("code",[_._v(".MYD")]),_._v("这个文件单独来存放数据自然可以优化数据库的查询等操作。")])]),_._v(" "),e("h4",{attrs:{id:"myisam引擎调优"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#myisam引擎调优","aria-hidden":"true"}},[_._v("#")]),_._v(" MyISAM引擎调优")]),_._v(" "),e("ol",[e("li",[_._v("设置合适的索引（缓存机制）")]),_._v(" "),e("li",[_._v("调整读写优先级，根据实际需求确保重要操作更优先执行。")]),_._v(" "),e("li",[_._v("启用延迟插入改善大批量写入性能（降低写入频率，尽可能多条数据一次性写入）")]),_._v(" "),e("li",[_._v("尽量顺序操作让"),e("code",[_._v("insert")]),_._v("数据都写入到尾部，减少阻塞。")]),_._v(" "),e("li",[_._v("分解大的时间长的操作，降低单个操作的阻塞时间。")]),_._v(" "),e("li",[_._v("降低并发数（减少对"),e("code",[_._v("mysql")]),_._v("访问），某些高并发场景通过应用进行排队队列机制Q队列")]),_._v(" "),e("li",[_._v("对于相对静态（更改不频繁）的数据库数据，充分利用"),e("code",[_._v("Query Cache")]),_._v("或"),e("code",[_._v("memcached")]),_._v("缓存服务可以极大的提高访问效率。")]),_._v(" "),e("li",[e("code",[_._v("MyISAM")]),_._v("的"),e("code",[_._v("count")]),_._v("只有在全表扫描的时候特别高效，带有其他条件的"),e("code",[_._v("count")]),_._v("都需要进行实际的数据访问"),e("code",[_._v("select count(*) from oldboy.zizeng")]),_._v(";")]),_._v(" "),e("li",[_._v("可以把主从同步的主库使用"),e("code",[_._v("innodb")]),_._v(",从库使用"),e("code",[_._v("myisam")]),_._v("引擎（但是在为了主从切换的时候还是要用"),e("code",[_._v("innodb")]),_._v("，所以这个不现实。）")])]),_._v(" "),e("h3",{attrs:{id:"innodb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#innodb","aria-hidden":"true"}},[_._v("#")]),_._v(" InnoDB")]),_._v(" "),e("p",[e("code",[_._v("InnoDB")]),_._v("是一个事务型的存储引擎，有行级锁定和外键约束。")]),_._v(" "),e("ol",[e("li",[_._v("支持事务，完美的"),e("code",[_._v("ACID")]),_._v("兼容")]),_._v(" "),e("li",[_._v("具有提交、回滚和崩溃恢复能力，通过"),e("code",[_._v("bin-log")]),_._v("日志可以从灾难中恢复")]),_._v(" "),e("li",[_._v("行级锁定可以让并发较高时，使用"),e("code",[_._v("Innodb")]),_._v("引擎会提升效率")]),_._v(" "),e("li",[_._v("外键约束可以实现级联更新，级联删除等操作")]),_._v(" "),e("li",[_._v("具有非常高效的缓存特性：能缓存索引，也能缓存数据")])]),_._v(" "),e("h4",{attrs:{id:"innodb引擎调优"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#innodb引擎调优","aria-hidden":"true"}},[_._v("#")]),_._v(" InnoDB引擎调优")]),_._v(" "),e("ol",[e("li",[_._v("主键要尽可能小，避免给"),e("code",[_._v("secondary index")]),_._v("带来过大的空间负担。")]),_._v(" "),e("li",[_._v("避免全表扫描，因为会使用表锁")]),_._v(" "),e("li",[_._v("尽可能缓存所有的索引和数据，提高响应速度，减少磁盘"),e("code",[_._v("IO")]),_._v("消耗。")]),_._v(" "),e("li",[_._v("在大批量小插入的时候，尽量自己控制事务而不要使用"),e("code",[_._v("autocommit")]),_._v("自动提交，有开关可以控制提交方式。")]),_._v(" "),e("li",[_._v("合理设置"),e("code",[_._v("innodb_flush_log_at_trx_commit")]),_._v("参数值，不要过度追求安全性。如果"),e("code",[_._v("innodb_flush_log_at_trx_commit")]),_._v("的值为"),e("code",[_._v("0")]),_._v("，"),e("code",[_._v("log buffer")]),_._v("每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作。")]),_._v(" "),e("li",[_._v("避免主键更新，因为这会带来大量的数据移动。")])])])},[],!1,null,null,null);v.default=a.exports}}]);