(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{278:function(v,_,e){"use strict";e.r(_);var t=e(22),o=Object(t.a)({},function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"计算机网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络","aria-hidden":"true"}},[v._v("#")]),v._v(" 计算机网络")]),v._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"network.png",href:"https://s2.ax1x.com/2019/08/08/e747xU.png"}},[e("img",{attrs:{src:"https://s2.ax1x.com/2019/08/08/e747xU.png",alt:"network.png"}})])]),v._v(" "),e("h2",{attrs:{id:"osi七层模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#osi七层模型","aria-hidden":"true"}},[v._v("#")]),v._v(" OSI七层模型")]),v._v(" "),e("blockquote",[e("p",[v._v("参考来自："),e("a",{attrs:{href:"https://www.cnblogs.com/z-sm/p/7501549.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.cnblogs.com/z-sm/p/7501549.html"),e("OutboundLink")],1)])]),v._v(" "),e("p",[v._v("由上自下分别是：")]),v._v(" "),e("p",[v._v("7."),e("code",[v._v("应用层")]),v._v("：提供应用程序访问OSI环境的手段。")]),v._v(" "),e("p",[v._v("6."),e("code",[v._v("表示层")]),v._v("：为应用层进程提供格式化的表示和转换数据服务。")]),v._v(" "),e("p",[v._v("5."),e("code",[v._v("会话层")]),v._v("：进程间的对话也称为会话，会话层管理不同主机上各进程间的对话。")]),v._v(" "),e("p",[v._v("4."),e("code",[v._v("传输层")]),v._v("：提供不具体网络的高效、经济、透明的端到端数据传输服务。")]),v._v(" "),e("p",[v._v("3."),e("code",[v._v("网络层")]),v._v("：将数据分成一定长度的分组，将分组穿过通信子网，从信源选择路径后传到信宿。")]),v._v(" "),e("p",[v._v("2."),e("code",[v._v("数据链路层")]),v._v("：将数据分成一个个数据帧，以数据帧为单位传输。有应有答，遇错重发。")]),v._v(" "),e("p",[v._v("1."),e("code",[v._v("物理层")]),v._v("：在物理媒体上传输原始的数据比特流。")]),v._v(" "),e("h4",{attrs:{id:"各层协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#各层协议","aria-hidden":"true"}},[v._v("#")]),v._v(" 各层协议")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("应用层：TELNET、FTP、TFTP、SMTP、SNMP、HTTP、BOOTP、DHCP、DNS "),e("strong",[v._v("（注：DNS使用的传输协议既可为TCP又可为UDP）")])])]),v._v(" "),e("li",[e("p",[v._v("表示层：")]),v._v(" "),e("ul",[e("li",[v._v("文本：ASCII，EBCDIC")]),v._v(" "),e("li",[v._v("图形：TIFF，JPEG，GIF，PICT")]),v._v(" "),e("li",[v._v("声音：MIDI，MPEG，QUICKTIME")])])]),v._v(" "),e("li",[e("p",[v._v("会话层：Socket、NFS、SQL、RPC 、X-WINDOWS、ASP（APPTALK会话协议）、SCP")])]),v._v(" "),e("li",[e("p",[v._v("传输层：TCP、UDP、SPX")])]),v._v(" "),e("li",[e("p",[v._v("网络层：IP、IPX、ICMP、RIP、OSPF(Open Shortest Path First开放式最短路径优先)")])]),v._v(" "),e("li",[e("p",[v._v("数据链路层：SDLC、HDLC、PPP、STP（Spanning Tree Protocol）、帧中继")])]),v._v(" "),e("li",[e("p",[v._v("物理层：EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45")])])]),v._v(" "),e("h2",{attrs:{id:"tcp-ip五层模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip五层模型","aria-hidden":"true"}},[v._v("#")]),v._v(" TCP/IP五层模型")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("物理层")]),v._v(" "),e("p",[v._v("物理层规定:为传输数据所需要的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性，确保原始的数据可在各种物理媒体上传输，为设备之间的数据通信提供传输媒体及互连设备，为数据传输提供可靠的环境。")])]),v._v(" "),e("li",[e("p",[v._v("数据链路层")]),v._v(" "),e("p",[v._v("主要提供链路控制（同步，异步，二进制，HDLC），差错控制（重发机制），流量控制（窗口机制）")]),v._v(" "),e("p",[v._v("2.1 "),e("code",[v._v("MAC")]),v._v("：媒体接入控制，主要功能是调度，把逻辑信道映射到传输信道，负责根据逻辑信道的瞬时源速率为各个传输信道选择适当的传输格式。MAC层主要有3类逻辑实体，第一类是MAC-b，负责处理广播信道数据；第二类是MAC-c，负责处理公共信道数据；第三类是MAC-d，负责处理专用信道数据。")]),v._v(" "),e("p",[v._v("2.2 "),e("code",[v._v("RLC")]),v._v("：无线链路控制，不仅能载控制面的数据，而且也承载用户面的数据。RLC子层有三种工作模式，分别是透明模式、非确认模式和确认模式，针对不同的业务采用不同的模式。")]),v._v(" "),e("p",[v._v("2.3 "),e("code",[v._v("BMC")]),v._v("：广播/组播控制，负责控制多播/组播业务。")]),v._v(" "),e("p",[v._v("2.4 "),e("code",[v._v("PDCP")]),v._v("：分组数据汇聚协议，负责对IP包的报头进行压缩和解压缩，以提高空中接口无线资源的利用率。")])]),v._v(" "),e("li",[e("p",[v._v("网络层")]),v._v(" "),e("p",[v._v("提供阻塞控制，路由选择（静态路由，动态路由）等")]),v._v(" "),e("p",[v._v("3.1 "),e("code",[v._v("IP")]),v._v("：IP协议提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。IP地址是重要概念")]),v._v(" "),e("p",[v._v("3.2 "),e("code",[v._v("ARP")]),v._v("：地址解析协议。基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。以太网中的数据帧从一个主机到达网内的另一台主机是根据48位的以太网地址（硬件地址）来确定接口的，而不是根据32位的IP地址。内核必须知道目的端的硬件地址才能发送数据。P2P的连接是不需要ARP的。")]),v._v(" "),e("p",[v._v("3.3 "),e("code",[v._v("RARP")]),v._v("：反向地址转换协议。允许局域网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP 地址。局域网网关路由器中存有一个表以映射MAC和与其对应的 IP 地址。当设置一台新的机器时，其 RARP 客户机程序需要向路由器上的 RARP 服务器请求相应的 IP 地址。假设在路由表中已经设置了一个记录，RARP 服务器将会返回 IP 地址给机器。")]),v._v(" "),e("p",[v._v("3.4 "),e("code",[v._v("IGMP")]),v._v("：组播协议包括组成员管理协议和组播路由协议。组成员管理协议用于管理组播组成员的加入和离开，组播路由协议负责在路由器之间交互信息来建立组播树。IGMP属于前者，是组播路由器用来维护组播组成员信息的协议，运行于主机和和组播路由器之间。IGMP 信息封装在IP报文中，其IP的协议号为2。")]),v._v(" "),e("p",[v._v("3.5 "),e("code",[v._v("ICMP")]),v._v("：Internet控制报文协议。用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。")]),v._v(" "),e("p",[v._v("3.6 "),e("code",[v._v("BGP")]),v._v(" :边界网关协议。处理像因特网大小的网络和不相关路由域间的多路连接。")]),v._v(" "),e("p",[v._v("3.7 "),e("code",[v._v("RIP")]),v._v("：路由信息协议。是一种分布式的基于距离矢量的路由选择协议。")])]),v._v(" "),e("li",[e("p",[v._v("传输层")]),v._v(" "),e("p",[v._v("提供分割与重组数据，按端口号寻址，连接管理差错控制和流量控制,纠错的功能。传输层要向会话层提供通信服务的可靠性，避免报文的出错、丢失、延迟时间紊乱、重复、乱序等差错。")]),v._v(" "),e("p",[v._v("4.1 "),e("code",[v._v("TCP")]),v._v(": 一种面向连接的、可靠的、基于字节流的传输层通信协议。")]),v._v(" "),e("p",[v._v("4.2 "),e("code",[v._v("UDP")]),v._v(": 用户数据报协议，一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。")]),v._v(" "),e("p",[v._v("4.3 "),e("code",[v._v("RTP")]),v._v(": 实时传输协议，为数据提供了具有实时特征的端对端传送服务，如在组播或单播网络服务下的交互式视频音频或模拟数据。")]),v._v(" "),e("p",[v._v("4.4 "),e("code",[v._v("SCTP")]),v._v("： 一个面向连接的流控制传输协议，它可以在两个端点之间提供稳定、有序的数据传递服务。SCTP可以看做是TCP协议的改进，它继承了TCP较为完善的拥塞控制并改进TCP的一些不足：")]),v._v(" "),e("pre",[e("code",[v._v(" 4.4.1 SCTP是多宿主连接，而TCP是单地址连接。\n\n 4.4.2 一个TCP连接只能支持一个流，一个SCTP连接可以支持多个流。\n\n 4.4.3 SCTP有更好的安全性。\n")])])]),v._v(" "),e("li",[e("p",[v._v("应用层")]),v._v(" "),e("p",[v._v("5.1 "),e("code",[v._v("HTTP")]),v._v("：超文本传输协议，基于TCP，是用于从WWW服务器传输超文本到本地浏览器的传输协议。它可以使浏览器更加高效，使网络传输减少。")]),v._v(" "),e("p",[v._v("5.2 "),e("code",[v._v("SMTP")]),v._v("：简单邮件传输协议,是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。")]),v._v(" "),e("p",[v._v("5.3 "),e("code",[v._v("SNMP")]),v._v("：简单网络管理协议，由一组网络管理的标准组成，包含一个应用层协议、数据库模型和一组资源对象。")]),v._v(" "),e("p",[v._v("5.4 "),e("code",[v._v("FTP")]),v._v("：文件传输协议，用于Internet上的控制文件的双向传输。同时也是一个应用程序。")]),v._v(" "),e("p",[v._v("5.5 "),e("code",[v._v("Telnet")]),v._v("：是Internet远程登陆服务的标准协议和主要方式。为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。")]),v._v(" "),e("p",[v._v("5.6 "),e("code",[v._v("SSH")]),v._v("：安全外壳协议，为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。")]),v._v(" "),e("p",[v._v("5.7 "),e("code",[v._v("NFS")]),v._v("：网络文件系统，是FreeBSD支持的文件系统中的一种，允许网络中的计算机之间通过TCP/IP网络共享资源。")])])]),v._v(" "),e("h2",{attrs:{id:"tcp与udp的对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp与udp的对比","aria-hidden":"true"}},[v._v("#")]),v._v(" TCP与UDP的对比")]),v._v(" "),e("p",[e("code",[v._v("TCP")]),v._v("：面向连接、传输可靠、适合少量数据、速度慢")]),v._v(" "),e("p",[e("code",[v._v("UDP")]),v._v("：面向非连接、传输不可靠、传输大量数据、速度快")]),v._v(" "),e("p",[v._v("IP数据报最大传输单位MTU一般为1500 Byte"),e("br"),v._v("\nUDP 包的大小应该是 1500 - IP头(20) - UDP头(8) = 1472 Byte"),e("br"),v._v("\nTCP 包的大小应该是 1500 - IP头(20) - TCP头(20) = 1460  Byte")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("TCP")]),v._v("面向连接（如打电话要先拨号建立连接）;"),e("code",[v._v("UDP")]),v._v("是无连接的，即发送数据之前不需要建立连接")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("提供可靠的服务。也就是说，通过"),e("code",[v._v("TCP")]),v._v("连接传送的数据，无差错，不丢失，不重复，且按序到达;"),e("code",[v._v("UDP")]),v._v("尽最大努力交付，即不保证可靠交付")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("面向字节流，实际上是"),e("code",[v._v("TCP")]),v._v("把数据看成一连串无结构的字节流;"),e("code",[v._v("UDP")]),v._v("是面向报文的，"),e("code",[v._v("UDP")]),v._v("没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）")]),v._v(" "),e("li",[v._v("每一条"),e("code",[v._v("TCP")]),v._v("连接只能是点到点的;"),e("code",[v._v("UDP")]),v._v("支持一对一，一对多，多对一和多对多的交互通信")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("首部开销20字节;"),e("code",[v._v("UDP")]),v._v("的首部开销小，只有"),e("code",[v._v("8")]),v._v("个字节")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("的逻辑通信信道是全双工的可靠信道，"),e("code",[v._v("UDP")]),v._v("则是不可靠信道")])]),v._v(" "),e("h2",{attrs:{id:"tcp三次握手、四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手、四次挥手","aria-hidden":"true"}},[v._v("#")]),v._v(" TCP三次握手、四次挥手")]),v._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"n7AFgI.png",href:"https://s2.ax1x.com/2019/09/18/n7AFgI.png"}},[e("img",{attrs:{src:"https://s2.ax1x.com/2019/09/18/n7AFgI.png",alt:"n7AFgI.png"}})])]),v._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"n7ANaF.png",href:"https://s2.ax1x.com/2019/09/18/n7ANaF.png"}},[e("img",{attrs:{src:"https://s2.ax1x.com/2019/09/18/n7ANaF.png",alt:"n7ANaF.png"}})])]),v._v(" "),e("p",[e("a",{attrs:{"data-fancybox":"",title:"n7AcVO.png",href:"https://s2.ax1x.com/2019/09/18/n7AcVO.png"}},[e("img",{attrs:{src:"https://s2.ax1x.com/2019/09/18/n7AcVO.png",alt:"n7AcVO.png"}})])]),v._v(" "),e("h2",{attrs:{id:"http协议各版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http协议各版本","aria-hidden":"true"}},[v._v("#")]),v._v(" HTTP协议各版本")]),v._v(" "),e("blockquote",[e("p",[v._v("HTTP 1.1")])]),v._v(" "),e("ol",[e("li",[e("p",[e("strong",[v._v("支持长连接")]),v._v("，HTTP 1.1中默认开启Connection: keep-alive，减少了建立和关闭连接的消耗和延迟")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("支持流水线(Pipelining)管道化")]),v._v("，请求可以并行发出，但是响应必须串行返回，\n若前一个响应未及时返回，后面的响应将被阻塞，造成HTTP的队头阻塞")])])]),v._v(" "),e("blockquote",[e("p",[v._v("HTTP 2.0")])]),v._v(" "),e("ol",[e("li",[e("p",[e("strong",[v._v("多路复用")]),v._v("，同域名下所有通信都在单个TCP连接上完成，同时引入帧和流的概念。**在一个TCP连接中，不同的流可以并行交错地发送多个请求/响应，各个流相互间并不影响，但是同一条流内的帧达到顺序必须有序。**客户端接收后根据帧首部的流标识将数据组装。这就是传输中无序，接收时组装。")]),v._v(" "),e("ul",[e("li",[v._v("连接 Connection ：1个TCP连接包含多个Stream。")]),v._v(" "),e("li",[v._v("数据流 Stream ：一个双向通讯数据流，包含1条或多条 message。")]),v._v(" "),e("li",[v._v("消息 Message ：对应HTTP/1 中的请求或者响应，包含一个或者多条 Frame")]),v._v(" "),e("li",[v._v("数据帧 Frame ：最小单位以二进制压缩格式存放 HTTP/1 中的内容")])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("二进制传输与首部压缩")]),v._v("，采用二进制格式传输数据，而非HTTP/1.x 里纯文本形式的报文 ，二进制协议解析起来更高效。首部压缩，开发了专门的\"HPACK''算法，在客户端和服务器端使用“首部表”来跟踪和存储之前发送首部数据，对于相同的数据，不再通过每次请求和响应发送。第二个请求只需要发送前一个请求的差异数据，减少冗余数据，降低开销。")])])]),v._v(" "),e("p",[v._v("3."),e("strong",[v._v("服务器推送")]),v._v("，服务器请求一个资源之后将可能使用的其他资源推送给客户端。比如浏览器只请求了index.html，但是服务器把index.html、style.css、example.png全部发送给浏览器。这样的话，只需要一轮 HTTP 通信，浏览器就得到了全部资源，提高了性能。")]),v._v(" "),e("h2",{attrs:{id:"http队头阻塞与tcp队头阻塞"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http队头阻塞与tcp队头阻塞","aria-hidden":"true"}},[v._v("#")]),v._v(" HTTP队头阻塞与TCP队头阻塞")]),v._v(" "),e("p",[e("strong",[v._v("HTTP队头阻塞：")]),v._v(" HTTP管道化请求可以并行发出但要求服务端必须按照请求发送的顺序返回响应，那如果一个响应返回延迟了，那么其后续的响应都会被延迟，直到队头的响应送达。")]),v._v(" "),e("p",[e("strong",[v._v("TCP队头阻塞：")]),v._v(" 在传输过程中一个TCP分节丢失，导致其后续分节不按序到达接收端的时候，该后续分节将被接收端一直保持直到丢失的第一个分节被发送端重传并到达接收端为止。")]),v._v(" "),e("h2",{attrs:{id:"cookie、session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie、session","aria-hidden":"true"}},[v._v("#")]),v._v(" Cookie、Session")]),v._v(" "),e("h3",{attrs:{id:"cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie","aria-hidden":"true"}},[v._v("#")]),v._v(" - Cookie")]),v._v(" "),e("p",[e("strong",[v._v("Cookie的特性")]),v._v("：会话数据保存在浏览器客户端\n"),e("strong",[v._v("Cookie的底层实现原理")]),v._v("：")]),v._v(" "),e("p",[v._v("1.服务器创建cookie对象，把会话数据存储到cookie对象中。")]),v._v(" "),e("p",[v._v('new Cookie("name","value");')]),v._v(" "),e("p",[v._v("2.服务器发送cookie信息到浏览器")]),v._v(" "),e("p",[v._v("response.addCookie(cookie);")]),v._v(" "),e("p",[v._v("3. 浏览器从响应头中得到服务器发送的Cookie然后保存到浏览器本地。")]),v._v(" "),e("p",[e("strong",[v._v("Cookie易错点")]),v._v("：")]),v._v(" "),e("p",[v._v("1.Cookie不能跨浏览器")]),v._v(" "),e("p",[v._v("2.Cookie默认关闭浏览器失效。如果不想让Cookie默认关闭浏览器失效，可以使用setMaxAge(int expiry) 来设置有效时间")]),v._v(" "),e("p",[v._v("正整数：表示保存的时间，以秒为单位")]),v._v(" "),e("p",[v._v("负整数：表示浏览器关闭cookie就失效了！")]),v._v(" "),e("p",[v._v("零：表示删除同名的cookie数据")]),v._v(" "),e("p",[v._v("3.Cookie数据类型只能保存非中文字符串类型。可以保存多个cookie，但是浏览器一般只允许存放300个Cookie，每个站点最多存放20个Cookie，每个Cookie的大小限制为4KB。")]),v._v(" "),e("p",[v._v("4.Cookie的不可跨域性")]),v._v(" "),e("h3",{attrs:{id:"session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session","aria-hidden":"true"}},[v._v("#")]),v._v(" - Session")]),v._v(" "),e("p",[e("strong",[v._v("Session的特性")]),v._v("：会话数据保存在服务器端")]),v._v(" "),e("p",[e("strong",[v._v("Session底层实现原理")]),v._v("：服务器创建一个session之后，会在响应头里面将sessionId返回给浏览器。浏览器从响应头中获取sessionId，然后保存在浏览器本地。")]),v._v(" "),e("p",[v._v("具体步骤如下：")]),v._v(" "),e("p",[v._v("1.服务器创建session对象")]),v._v(" "),e("p",[v._v("2.设置session对象")]),v._v(" "),e("p",[v._v("3.保存会话数据到session对象")]),v._v(" "),e("p",[v._v("4.服务器通过响应头将sessionId返回给浏览器")]),v._v(" "),e("p",[v._v("5.浏览器从响应头中获取sessionId保存到本地硬盘")]),v._v(" "),e("p",[e("strong",[v._v("Session易错点")]),v._v("：")]),v._v(" "),e("p",[v._v("1.session默认情况下30分钟服务器自动回收。")]),v._v(" "),e("p",[v._v("2.关闭浏览器session不会失效（因为session保存在服务器端），但是sessionId会失效（因为sessionId保存在浏览器端）")])])},[],!1,null,null,null);_.default=o.exports}}]);